using Ecom.Helpers;
using Ecom.Services;
using Ecom.ViewModel.Staff;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using ToastNotifications.Messages;

namespace Ecom.View.Staff
{
    /// <summary>
    /// Interaction logic for StaffView.xaml
    /// </summary>
    public partial class StaffView : UserControl, INotifyPropertyChanged
    {
        private readonly StaffService _service;

        public event PropertyChangedEventHandler PropertyChanged;
        public StaffViewModel ViewModel;

        public StaffView(StaffService service)
        {
            InitializeComponent();

            _service = service;

            DataContext = ViewModel = new StaffViewModel();

            Load();
        }

        private async void Load()
        {
            ViewModel.StaffMembers = new ObservableCollection<StaffListViewModel>(await _service.FetchAllStaff());
            OnPropertyChanged(nameof(ViewModel.StaffMembers));
        }

        private void DataGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            PropertyDescriptor propertyDescriptor = (PropertyDescriptor)e.PropertyDescriptor;
            e.Column.Header = propertyDescriptor.DisplayName;

            if (propertyDescriptor.DisplayName == "HasErrors" || propertyDescriptor.DisplayName == "Id")
            {
                e.Cancel = true;
            }
        }

        private void DataGrid_AutoGeneratedColumns(object sender, System.EventArgs e)
        {
            DataGridTemplateColumn buttonColumn = new DataGridTemplateColumn();
            buttonColumn.Header = "Actions";
            buttonColumn.Width = 120;

            DataTemplate buttonTemplate = new DataTemplate();
            FrameworkElementFactory panelFactory = new FrameworkElementFactory(typeof(WrapPanel));
            buttonTemplate.VisualTree = panelFactory;

            //Todo: Add Check for permission
            FrameworkElementFactory viewButtonFactory = new FrameworkElementFactory(typeof(Button));
            viewButtonFactory.AddHandler(ButtonBase.ClickEvent, new RoutedEventHandler((o, e) => LoadStaffDetails()));
            viewButtonFactory.SetValue(StyleProperty, Application.Current.FindResource("EcomDataGridViewButton") as Style);
            viewButtonFactory.SetValue(ToolTipProperty, "View Staff Member");
            panelFactory.AppendChild(viewButtonFactory);

            //Todo: Add Check for permission
            FrameworkElementFactory deleteButtonFactory = new FrameworkElementFactory(typeof(Button));
            deleteButtonFactory.AddHandler(ButtonBase.ClickEvent, new RoutedEventHandler((o, e) => LoadStaffDetails()));
            deleteButtonFactory.SetValue(StyleProperty, Application.Current.FindResource("EcomDataGridDeleteButton") as Style);
            deleteButtonFactory.SetValue(ToolTipProperty, "Delete Staff Member");
            panelFactory.AppendChild(deleteButtonFactory);


            buttonColumn.CellTemplate = buttonTemplate;

            DataGrid_StaffList.Columns.Add(buttonColumn);
        }

        private async void LoadStaffDetails()
        {
            var selected = DataGrid_StaffList.SelectedItem as StaffListViewModel;
            var staffMember = await _service.FetchStaffById(selected.Id);
            if (staffMember == null)
            {
                Globals.Notifier.ShowWarning("Oopps! Something went wrong. I couldn't find that Staff Member");
            }
            else
            {
                Globals.Mapper.Map(staffMember, ViewModel);
                Globals.Notifier.ShowSuccess("Staff Member Details Loaded");
            }
        }

        private void ConfigureNewStaffMember()
        {
            //Flip Detail Cards
            flipperPersonal.IsFlipped = true;
            flipperAddress.IsFlipped = true;
            flipperEmployment.IsFlipped = true;

            //Disable Save Button
            PersonalSaveButton.Visibility = Visibility.Collapsed;
            AddressSaveButton.Visibility = Visibility.Collapsed;
            EmploymentSaveButton.Visibility = Visibility.Collapsed;

            //Show New Staff Member Card
            flipperNewStaff.Visibility = Visibility.Visible;
            flipperNewStaff.IsFlipped = false;

            //New Up StaffViewModel
            ViewModel = new StaffViewModel();

            DataContext = ViewModel;
        }

        private async void PersonalSave_Click(object sender, RoutedEventArgs e)
        {
            if (await _service.UpdateStaffMember(ViewModel))
            { 
                Globals.Notifier.ShowSuccess("Personal Details Updated");
                Load();
            }
            else
                Globals.Notifier.ShowError("Oh no! Something went wrong while updating personal details");
        }

        private async void AddressSave_Click(object sender, RoutedEventArgs e)
        {
            if (await _service.UpdateStaffMember(ViewModel))
            {
                Globals.Notifier.ShowSuccess("Address Details Updated");
                Load();
            }
            else
                Globals.Notifier.ShowError("Oh no! Something went wrong while updating address details");
        }

        private async void EmploymentSave_Click(object sender, RoutedEventArgs e)
        {
            if (await _service.UpdateStaffMember(ViewModel))
            {
                Globals.Notifier.ShowSuccess("Employment Details Updated");
                Load();
            }
            else
                Globals.Notifier.ShowError("Oh no! Something went wrong while updating employment details");
        }

        private void AddNewStaff_Click(object sender, RoutedEventArgs e) => ConfigureNewStaffMember();

        protected void OnPropertyChanged([CallerMemberName] string name = null) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));

        private void OpenNewStaffPrompt_Click(object sender, RoutedEventArgs e)
        {
            DataContext = ViewModel;
            if (ViewModel.IsValid())
            {
                flipperPersonal.IsFlipped = false;
                flipperAddress.IsFlipped = false;
                flipperEmployment.IsFlipped = false;
                flipperNewStaff.IsFlipped = true;
            }
            else
            {
                flipperPersonal.IsFlipped = true;
                flipperAddress.IsFlipped = true;
                flipperEmployment.IsFlipped = true;
                flipperNewStaff.IsFlipped = false;

                foreach (var error in ViewModel.GetValidationErrors())
                {
                    Globals.Notifier.ShowWarning(error);
                }
            }
        }

        private void CreateStaffMember_Click(object sender, RoutedEventArgs e)
        {
            Globals.Notifier.ShowInformation("Staff Member Created Test");
        }

        private void CancelCreateStaffMember_Click(object sender, RoutedEventArgs e)
        {
            flipperPersonal.IsFlipped = true;
            flipperAddress.IsFlipped = true;
            flipperEmployment.IsFlipped = true;
            flipperNewStaff.IsFlipped = false;
        }
    }
}
